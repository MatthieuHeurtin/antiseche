///////////////////dans le .h//////////////////
#include <stdio.h>
#define M 25
struct wesh
{
	char nom[M];
	char grade[M];
};
//que les prototypes
typedef struct wesh wesh;


////////////////////////////dans le .c
#include "le point.h"
//////////main.c////////////////////////////
#include <stdio.h>
#include <string.h>
#include "fonction.h"
int main(int argc, char **argv)
{

	 wesh joueur1;
	printf("C'est quoi ton nom\n");
	scanf("%s", joueur1.nom);
	printf("ton nom est %s\n", joueur1.nom);
	printf("Quel est ton grade?\n");
	scanf("%s", joueur1.grade);
	strcat(joueur1.nom, joueur1.grade);
	printf("Salut à toi %s ", joueur1.nom);
	
	return 0;
}


///////////lire un fichier//////////////////
int main(int argc, char *argv[])
{
    FILE* fichier = NULL;
    int score[3] = {0}; // Tableau des 3 meilleurs scores
 
    fichier = fopen("test.txt", "r");
 
    if (fichier != NULL)
    {
        fscanf(fichier, "%d %d %d", &score[0], &score[1], &score[2]);
        printf("Les meilleurs scores sont : %d, %d et %d", score[0], score[1], score[2]);
 
        fclose(fichier);
    }
 
    return 0;
}
//////////////ecrire dans un fichier//////////
int main(int argc, char *argv[])
{
    FILE* fichier = NULL;
    int age = 0;
 
    fichier = fopen("test.txt", "w");
 
    if (fichier != NULL)
    {
        // On demande l'âge
        printf("Quel age avez-vous ? ");
        scanf("%d", &age);
 
        // On l'écrit dans le fichier
        fprintf(fichier, "Le Monsieur qui utilise le programme, il a %d ans", age);
        fclose(fichier);
    }
 
    return 0;
}
/////////////////////////Memoire allocation/////////////////
int main(int argc, char *argv[])
{
    int* memoireAllouee = NULL;

    memoireAllouee = malloc(sizeof(int)); // Allocation de la mémoire
    if (memoireAllouee == NULL)
    {
        exit(0);
    }

    // Utilisation de la mémoire
    printf("Quel age avez-vous ? ");
    scanf("%d", memoireAllouee);
    printf("Vous avez %d ans\n", *memoireAllouee);

    free(memoireAllouee); // Libération de mémoire

    return 0;
}
///////////////////////allocation d'un tableau////////////////////////////////////////
int main(int argc, char *argv[])
{
    int* memoireAllouee = NULL;
//memoireAllouee est le pointeur qui pointe vers la première case du tableau
    memoireAllouee = malloc(4 * sizeof(int));
    if (memoireAllouee == NULL) // Si l'allocation a échoué
    {
        exit(0); // On arrête immédiatement le programme
    }

    // On peut continuer le programme normalement sinon

  // On peut utiliser ici la mémoire
    free(memoireAllouee); // On n'a plus besoin de la mémoire, on la libère

    return 0;
}


///////////////////////////////////////////deplacement curseur///////////////////////
int fseek(FILE* pointeurSurFichier, long deplacement, int origine);

fseek(fichier, 0, SEEK_END);


    SEEK_SET : indique le début du fichier.
    SEEK_CUR : indique la position actuelle du curseur.
    SEEK_END : indique la fin du fichier.

/////////////////////////pointeur////////////////////
    Sur une variable, comme la variable age :
        "age" signifie : "Je veux la valeur de la variable age".
        "&age" signifie : "Je veux l'adresse où se trouve la variable age".
    Sur un pointeur, comme pointeurSurAge :
        "pointeurSurAge" signifie : "Je veux la valeur de pointeurSurAge" (cette valeur étant une adresse).
        "*pointeurSurAge" signifie : "Je veux la valeur de la variable qui se trouve à l'adresse contenue dans pointeurSurAge"


/////////////////////renvoie la position du curseur///////////////
long ftell(FILE* pointeurSurFichier);

/////////////////////////////sauter une ligne dans un dossier////////
while(fgetc(graphe) != '\n');

////////////////////////les listes/////////////////////////////////////////////// 
#include <stdlib.h>
 
typedef struct element element;
struct element
{
    int val;
    struct element *nxt;
};
 
typedef element* llist;
 
 
 
int main(int argc, char **argv)
{
    /* Déclarons 3 listes chaînées de façons différentes mais équivalentes */
    llist ma_liste1 = NULL;
    element *ma_liste2 = NULL;
    struct element *ma_liste3 = NULL;
 
 
    return 0;
}

////////////////////make file (SDL aussi)///////////////////////////////
CFLAGS=-W -Wall -ansi -pedantic

All : main.o fonction.o
	gcc main.o fonction.o -o l  `sdl-config --cflags --libs` $(LDFLAGS)
 
main.o : main.c fonction.c
	gcc -c main.c -o main.o $(LDFLAGS)
 
fonction.o : fonction.c
	gcc -c fonction.c -o fonction.o $(LDFLAGS)


clean:
	rm -rf *.o

mrproper: clean
	rm -rf l


///////////////////////////FREAD//////////////
Comme vous le voyez, cette fonction va renvoyer une variable de type size_t qui est en fait une valeur entière contenant le nombre d'éléments que la fonction aura lu. En ce qui concerne les arguments, vous voyez que cette fonction en prend 4 et ceux-ci sont les même que pour la fonction fwrite. Le premier déterminera dans quelle variable les données lues seront stockées, le deuxième désigne la taille des données qui seront lues, le troisième définit le nombre de fois que nous lirons cette taille et le dernier paramètre est le pointeur de fichier dans lequel la lecture s'effectuera.

    size_t fread (void *ptr, size_t size, size_t nmemb, FILE *stream);  



/////////////////////////////STRCMP//////////////////////////
strcmp(ligne,"P5") !=0)					/*strcmp renvoie 0 si ligne == P5, là ça va comparer ce qu'il y a dans le tableau "lign" et "P5" */


/////////////////EOF= fin de fichier/////////////


////////////////////////FWRITE//////////////////////////////////////////////
size_t fwrite (const void *ptr, size_t size, size_t nmemb, FILE *stream);



    ptr pointeur sur le premier octet de la liste d'objets à inscrire.
    size L'espace mémoire pris par un membre de la liste d'objets à inscrire.
    nmemb Le nombre de membres ayant la taille size dans la liste d'objets à inscrire.
    stream Pointeur sur le flux (pointeur sur FILE dans notre cas).
    Valeur retournée La fonction fwrite retourne le nombre d'éléments qu'elle a réussi à inscrire correctement dans le flux pointé par stream.

////////////////////////fget////////////////////////////////
fgets(ligne, 1024, fichier_image)

ligne : chaine de caractère
1024, nbr de cara qu'il doit lire
fichier_image: nom du fichier
elle renvoie NULL quand elle n'a plus rien à lire. (NON EOF)


//////chaine de caractère info/////////////////////////////////////////////

pour afficher une chaine 
printf("%s", chaine);

pour afficher un seul caractère
printf("%c", chaine[2]);

pour son code ascii
printf("%d", chaine[2]);



////////////////////sauter le code//////////
goto quelque_part;


quelque_part:

////////////////////////:passer des param
argv[1] est de type char* la première lettre est argv[1][0]

///////////////:creer un process
pid_t PID=fork()
IF PID==0 on est dans le fils 
SINON on est dans le pere.

si le père veut tuer son fils 
kill(PID,SIGQUIT);
a mettre dans le else après avoir attendu


pid_t PID=getppid(); 
renvoie le PID du père a user dans le fils


dans un printf %.7d //ecrit un entier sur 7 digit ie si on affiche 7 on va mettre 6 zero avant le 7


memset(mem, 0, n);//Permet de remplir l'espace mémoire pointé par mem avec des 0 sur n octets.


//attendre un process fils
waitpid(child_pid, &child_pid,0);  //si on met ' WNOHANG' au lieux de 0 on testera le changeltn d'etat du fils et après on continuera si au
					//aucun changement d'état avec 'WHOHANG' alors ca renvoie 0 sinon c'est le PID



///////////////////////////////GESTIONNAIRE DE SIGNAUX/////////////////////////////////
//quand on recoit un signal de type 'signum' alors on fait ce qui est def dans la struct 'act' on met le dernier param a NULL
int sigaction(int signum, const struct sigaction *act,
              struct sigaction *oldact);
///////exemple 
sigaction (SIGCHLD, &chld_end_process, NULL);			
//avantde faire ça in faut init la struct sigaction

struct sigaction {
    void     (*sa_handler) (int);
    void     (*sa_sigaction) (int, siginfo_t *, void *);
    sigset_t   sa_mask;
    int        sa_flags;
    void     (*sa_restorer) (void);
};


//sa_handler va pointer vers le gestionnaire de signal (ce que nou on fait)
//si on met 'SA_SIGINFO' dans flag, le gestionnaire est pointé pat sa_sigaction et alors il prend plus de param
//exemple
struct sigaction chld_end_process;	
chld_end_process.sa_sigaction = &hand;	
chld_end_process.sa_flags=SA_SIGINFO;

//dans ce cas la struct siginfo_t est 
siginfo_t {
    int     si_signo;       /* Numéro de signal         */
    int     si_errno;       /* Numéro d'erreur          */
    int     si_code;        /* Code du signal           */
    pid_t   si_pid;         /* PID de l'émetteur        */
    uid_t   si_uid;         /* UID réel de l'émetteur   */
    int     si_status;      /* Valeur de sortie         */
    clock_t si_utime;       /* Temps utilisateur écoulé */
    clock_t si_stime;       /* Temps système écoulé     */
    sigval_t si_value;      /* Valeur de signal         */
    int     si_int;         /* Signal POSIX.1b          */
    void   *si_ptr;         /* Signal POSIX.1b          */
    void   *si_addr;        /* Emplacement d'erreur     */
    int     si_band;        /* Band event               */
    int     si_fd;          /* Descripteur de fichier   */
}

//////////////////////////////////////////////PIPE/////////////////////////////////
pipe prend en param un tableau de deux int et les init: un des deux sera l'entré et l'autre la sortie, fd[0] est la sortie

ssize_t write(int fd, const void *buf, size_t count);
write()  lit  au  maximum count octets dans la zone mémoire pointée par
buf, et les écrit dans le fichier référencé par le descripteur fd.

ssize_t read(int fd, void *buf, size_t count);
read lit jusqu'à count octets depuis le descripteur de fichier fd dans le buffer pointé par buf. 

 dup2(pfd[1], 1) //connecte une sortie de pipe avec une entrée , pfd est notre pipe, le 1 c'est pour le pro en cours
stdin=0
stdout=1
stderr=2
close(pfd[0]); /* close the read side */

//REDIRECTION EN C
int in=open(seq->in, O_RDONLY);//on ouvre un fichier ayant pour descripteur 'in'
int out=open(seq->out, O_WRONLY | O_TRUNC | O_CREAT, S_IRUSR | S_IRGRP | S_IWGRP | S_IWUSR);//on ouvre un fichier ayant pour descripteur 'out'
dup2(in, 0); //on relie le fichier a notre entrée standard
close(in); //on ferme le fichier
execvp(*seq->seq[0], *seq->seq);

//LE JOKER EN C

#include <glob.h>
         typedef struct {
               size_t   gl_pathc;    //Count of paths matched so far  
               char   **gl_pathv;    // List of matched pathnames.  
               size_t   gl_offs;     // Slots to reserve in gl_pathv. 
           } glob_t;

glob_t JOKER; //on declare une struct de type glob_t
joker.gl_offs = 67; //on reserve le nombre de case que l'on va stocker dans le tableau de mot
char *nom={"*.c"};
glob(nom, FLAGS, NULL, &joker); // dans JOKER.gl_pathv on a tout ce qui finit par *.c



