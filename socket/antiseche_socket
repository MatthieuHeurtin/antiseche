#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h> /* Consultez NOTES */
#include <sys/socket.h> 
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ip.h> 
//creer une socket
SOCKET sock;

int socket(int domain, int type, int protocol);
La fonction retourne une socket créée à partir des paramètres qui suivent.
Le paramètre domain représente la famille de protocoles utilisée.
Il prend la valeur AF_INET pour le protocole TCP/IP.
Sinon, il prend la valeur AF_UNIX pour les communications UNIX en local sur une même machine.
Le type indique le type de service, il peut avoir les valeurs suivantes
      SOCK_STREAM, si on utilise le protocole TCP/IP.
      SOCK_DGRAM, si on utilise le protocole UDP/IP.
Nous utiliserons donc la première (notez qu'il en existe d'autres comme SOCK_RAW mais ils nous seront inutiles).
Dans le cas de la suite TCP/IP, le paramètre protocol n'est pas utile, on le mettra ainsi toujours à 0.

//EXEMPLE une sockete TCP

int sock = socket(AF_INET, SOCK_STREAM, 0); // c'est un descripteur de fichier
if(sock == -1)
{
printf("bug");
}

//on CONFIG notre socket
struct sockaddr_in addr ; //le struc qui représente l'adresse où aller
addr.sin_family = AF_INET; /* Protocole internet */ 
addr.sin_addr.s_addr = inet_addr("127.0.0.1"); //l'ip
addr.sin_port = htons(56789);//le port

////////////////////////////LA STRUCT
struct sockaddr_in {
/* famille de protocole (AF_INET) */
short sin_family;

/* numéro de port */
u_short sin_port;

/* adresse internet */
struct in_addr sin_addr;

char sin_zero[8]; /* initialise à zéro */
}

            sin_family représente le type de famille
            sin_port représente le port à contacter
            sin_addr représente l'adresse de l'hôte
            sin_zero[8] contient uniquement des zéros (étant donné que l'adresse IP et le port occupent 6 octets, les 8 octets restants doivent être à zéro) 
    addrlen indique la taille du champ localaddr. On utilise généralement sizeof(localaddr).



bind(int descripteur,sockaddr localaddr,int addrlen)

    descripteur représente le descripteur du socket nouvellement créé
    localaddr est une structure qui spécifie l'adresse locale à travers laquelle

bind(sock, (struct sockaddr *) &addr, sizeof(struct sockaddr)); //attendtion au cast


//////////////////////////LA FONCTION LISTEN
listen(socket,10); // met la socket 'socket' en attente de connection avec une file d'attente de 10





/////////////////////////////LA FONCTION ACCEPT
struct Sockaddr_in Appelant; //acceuille info de l'appelant
/* structure destinée à recueillir les renseignements sur l'appelant*/
Appelantlen = sizeof(from); 

accept(sock,(struct sockaddr *) &Appelant, (socklen_t*)sizeof(struct sockaddr_in));// elle renvoie un autre socket qui ser usé pour les fonction send et recv


/////////////////////////////FERMER LE SOCKET
int close(int socket);

////////////////////////////////ENVOIE octet 
int send(int socket,char * buffer,int len,int flags)

    socket représente le socket précédemment ouvert
    buffer représente un tampon contenant les octets à envoyer au client
    len indique le nombre d'octets à envoyer
    flags correspond au type d'envoi à adopter :
        le flag MSG_DONTROUTE indiquera que les données ne routeront pas
        le flag MSG_OOB indiquera que les données urgentes (Out Of Band) doivent être envoyées
        le flag 0 indique un envoi


//////////////////////////RECOIS OCTET
int recv(int socket,char * buffer,int len,int flags)

    socket représente le socket précédemment ouvert
    buffer représente un tampon qui recevra les octets en provenance du client
    len indique le nombre d'octets à lire
    flags correspond au type de lecture à adopter :
        le flag MSG_PEEK indiquera que les données lues ne sont pas retirées de la queue de réception
        le flag MSG_OOB indiquera que les données urgentes (Out Of Band) doivent être lues
        le flag 0 indique une lecture normale








 
